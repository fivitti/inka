#ifndef font_h
#define font_h

#include <avr/pgmspace.h>

/*
 * This file declare "font" for Nokia LCD display.
 * @ASCII table define which pixels will be on for each letter.
 * I extend this font by non-ASCII characters.
 * I notices that non-ASCII character are recognized as two bytes.
 * When we cast these to signed character we get two negative numbers.
 * For each pair negative number we calculate hash by injective function @ASCII_EXTEND_HASH.
 * When we have hash we check it position in @EXTEND_ASCII_LOCKUP. Index in this table
 * is position font in @ASCII table in extend part.
 *
 * Warning! If you add new non-ASCII characters you must check if @ASCII_EXTEND_HASH is injective function.
 *          and set correct value for @EXTEND_ASCII_LENGTH
 *          If you add new ASCII characters you must increment @EXTEND_ASCII_TABLE_START_SHIFT
 */

//Injective function for arguments from @EXTEND_ASCII_LOCKUP.
#define ASCII_EXTEND_HASH(first,second) ((first % 4) + (second % 39) + 128)
#define EXTEND_ASCII_LENGTH 21
//We skip not visible characters for save memory. This value must be substract from raw char value for
//get index in @ASCII table. E.g. ' ' as char has value ! (0x21). You must substract 0x20 for get index in array: 1.
#define ASCII_TABLE_START_SHIFT 0x20
//It is index in @ASCII first from extend characters.
#define EXTEND_ASCII_TABLE_START_SHIFT 0x60

//The elements here must have the same order as in @ASCII array.
static const PROGMEM byte EXTEND_ASCII_LOCKUP[] =
{
  ASCII_EXTEND_HASH(-61, -97),  //ß
  ASCII_EXTEND_HASH(-60, -123), //ą
  ASCII_EXTEND_HASH(-60, -121), //ć
  ASCII_EXTEND_HASH(-60, -103), //ę
  ASCII_EXTEND_HASH(-59, -126), //ł
  ASCII_EXTEND_HASH(-59, -124), //ń
  ASCII_EXTEND_HASH(-61, -77),  //ó
  ASCII_EXTEND_HASH(-59, -101), //ś
  ASCII_EXTEND_HASH(-59, -70),  //ź
  ASCII_EXTEND_HASH(-59, -68),  //ż
  ASCII_EXTEND_HASH(-60, -122), //Ć
  ASCII_EXTEND_HASH(-59, -127), //Ł
  ASCII_EXTEND_HASH(-59, -102), //Ś
  ASCII_EXTEND_HASH(-59, -71),  //Ź
  ASCII_EXTEND_HASH(-59, -69),  //Ż
  ASCII_EXTEND_HASH(-61, -74),  //ö
  ASCII_EXTEND_HASH(-61, -92),  //ä
  ASCII_EXTEND_HASH(-61, -68),  //ü
  ASCII_EXTEND_HASH(-61, -124), //Ä
  ASCII_EXTEND_HASH(-61, -100), //Ü
  ASCII_EXTEND_HASH(-61, -106), //Ö
};

static const PROGMEM byte ASCII[][5] =
{{0x00, 0x00, 0x00, 0x00, 0x00} // 20  
,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c \ backslash
,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
,{0x08, 0x54, 0x54, 0x54, 0x38} // 67 g
,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j 
,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ← //???
,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f → //???
,{0x7f, 0x01, 0x45, 0x4a, 0x30}   //80 ß  //0
,{0x20, 0x54, 0x54, 0xd4, 0x78}   //81 ą  //1
,{0x38, 0x44, 0x46, 0x45, 0x20}   //82 ć  //2
,{0x38, 0x54, 0x54, 0xd4, 0x18}   //83 ę  //3
,{0x00, 0x49, 0x7f, 0x44, 0x00}   //84 ł  //4
,{0x7c, 0x08, 0x06, 0x05, 0x78}   //85 ń  //5
,{0x38, 0x44, 0x46, 0x45, 0x38}   //86 ó  //6
,{0x48, 0x54, 0x56, 0x55, 0x20}   //87 ś  //7
,{0x44, 0x64, 0x56, 0x4d, 0x44}   //88 ź  //8
,{0x44, 0x64, 0x55, 0x4c, 0x44}   //89 ż  //9
,{0x3c, 0x42, 0x46, 0x43, 0x24}   //8a Ć  //10
,{0x7f, 0x50, 0x48, 0x44, 0x40}   //8b Ł  //11
,{0x4c, 0x52, 0x56, 0x53, 0x22}   //8c Ś  //12
,{0x42, 0x66, 0x53, 0x4a, 0x46}   //8d Ź  //13
,{0x42, 0x62, 0x53, 0x4a, 0x46}   //8e Ż  //14
,{0x38, 0x45, 0x44, 0x45, 0x38}   //8f ö  //15
,{0x20, 0x55, 0x54, 0x55, 0x7c}   //90 ä  //16
,{0x3c, 0x41, 0x40, 0x21, 0x7c}   //91 ü  //17
,{0x78, 0x15, 0x14, 0x15, 0x78}   //92 Ä  //18
,{0x3c, 0x41, 0x40, 0x41, 0x3c}   //93 Ü  //19
,{0x3c, 0x43, 0x42, 0x43, 0x3c}   //94 Ö  //20
};

#endif  // font.h
